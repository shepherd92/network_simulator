# project name
PROJECT := adrcm

# suppress Makefile output
# .SILENT :

# compiler and linker settings
CXX      := g++
LD       := g++

# std=c++17
# MP:  add phony target for each dependency other than the main file
# MT:  
# MD:  list user and system-defined include files
# MMD: list user-defined include files
# PIC: position independent code = if the code is shared between multiple processes, it is not possible to load the code to the same memory address
# ldl
CXXFLAGS := -std=c++17 -MMD -MP -Wall -Werror -Wextra -Wno-unused-result -Wsign-compare -pthread -pedantic-errors -save-temps=obj -fstack-protector-strong -fPIC
CXXFLAGS += $(shell python3.10 -m pybind11 --includes)
LDFLAGS  := -lstdc++ -m64 -lpthread -ldl -lutil -lm -L/usr/lib/python3.10/config-3.10-x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -fPIC $(shell python3.10 -m pybind11 --includes)

# directories
ROOT        := ..
MODULE_ROOT := .
BLDDIR      := $(ROOT)/build
LOGDIR      := $(BLDDIR)/log
SRCDIR      := $(MODULE_ROOT)/src
INCDIRNAME  := inc
TESTDIR     := $(MODULE_ROOT)/test
TESTBIN     := $(PROJECT)_test

# definition of extenstions
SRCEXT   := cpp
INLEXT   := inl
OBJEXT   := o
SHOBJEXT := $(shell python3.10-config --extension-suffix)

TARGETS := __all release debug clean test run_test

# remove files generated when there was an error
.DELETE_ON_ERROR :

# list phony targets
.PHONY : $(TARGETS)

# do print when directory changes
MAKEFLAGS += --no-print-directory

# add .d to make recognized suffixes
SUFFIXES += .d

# find source files
SRCS     := $(shell find $(SRCDIR)  -name *.$(SRCEXT))
TESTSRCS := $(shell find $(TESTDIR) -name *.$(SRCEXT))

# create dependency file names from object filenames
DEPS := $(SRCS:%.$(SRCEXT)=$(BLDDIR)/%.d)
DEPS += $(TESTSRCS:%.$(SRCEXT)=$(BLDDIR)/%.d)

# automatically create dependency files for object files
-include $(DEPS)

# construct include directory compiler flags
INCDIRS := $(shell find $(ROOT) -iname $(INCDIRNAME) -type d)
CXXFLAGS += $(addprefix -I , $(INCDIRS))

__all : release

# set target specific compiler and linker flags
debug test : CXXFLAGS += -g3 -pg -O0 --coverage -DDBG
debug test : LDFLAGS  += -pg -lgcov
release : CXXFLAGS += -O3

release debug : $(BLDDIR)/$(PROJECT)$(SHOBJEXT)
test : $(TESTBIN)
run_test : test | $(LOGDIR)
	@echo "Run:    " $(notdir $($(TESTBIN))) ...
	$(TESTBIN)
	$(shell [ -f gmon.out ] && mv gmon.out $(LOGDIR))

# create module shared object file
$(BLDDIR)/$(PROJECT)$(SHOBJEXT) : $(SRCS) | $(BLDDIR)
	@echo sh obj : $(notdir $@) ...
	$(CXX) $(CXXFLAGS) -shared $^ -o $@
	@touch $(BLDDIR)/__init__.py
	@rm -f $(@:.$(OBJEXT)=.gcda) $(@:.$(OBJEXT)=.gcno) # remove coverage files

# compile module object file
$(BLDDIR)/$(PROJECT).$(OBJEXT) : $(SRCS) | $(BLDDIR)
	@echo Compile: $(notdir $@) ...
	$(CXX) $(CXXFLAGS) -c $< -o $@

# link module test
$(TESTBIN) : $(BLDDIR)/$(TESTBIN).$(OBJEXT) $(BLDDIR)/$(PROJECT).$(OBJEXT)
	@echo "Link:   " $(notdir $@) ...
	$(CXX) $(LDFLAGS) $^ -o $@

# compile module test file
$(BLDDIR)/$(TESTBIN).$(OBJEXT) : $(TESTSRCS) | $(BLDDIR)
	@echo Compile: $(notdir $@) ...
	$(CXX) $(CXXFLAGS) -c $< -o $@

# make directories
$(BLDDIR) $(LOGDIR):
	@mkdir -p $@

clean :
	@rm -rf *~ core $(BLDDIR)
